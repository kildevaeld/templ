"use strict";

exports.parser = function () {
    "use strict";
    /*
     * Generated by PEG.js 0.9.0.
     *
     * http://pegjs.org/
     */

    function peg$subclass(child, parent) {
        function ctor() {
            this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
    }
    function peg$SyntaxError(message, expected, found, location) {
        this.message = message;
        this.expected = expected;
        this.found = found;
        this.location = location;
        this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, peg$SyntaxError);
        }
    }
    peg$subclass(peg$SyntaxError, Error);
    function peg$parse(input) {
        var options = arguments.length > 1 ? arguments[1] : {},
            parser = this,
            peg$FAILED = {},
            peg$startRuleFunctions = { Start: peg$parseStart },
            peg$startRuleFunction = peg$parseStart,
            peg$c0 = function peg$c0(children) {
            return children;
        },
            peg$c1 = "<!DOCTYPE",
            peg$c2 = { type: "literal", value: "<!DOCTYPE", description: "\"<!DOCTYPE\"" },
            peg$c3 = /^[^>]/,
            peg$c4 = { type: "class", value: "[^>]", description: "[^>]" },
            peg$c5 = ">",
            peg$c6 = { type: "literal", value: ">", description: "\">\"" },
            peg$c7 = function peg$c7(info) {
            return ["doctype", info.join("")];
        },
            peg$c8 = function peg$c8(children) {
            return trimTextExpressions(children);
        },
            peg$c9 = "<!--",
            peg$c10 = { type: "literal", value: "<!--", description: "\"<!--\"" },
            peg$c11 = "-->",
            peg$c12 = { type: "literal", value: "-->", description: "\"-->\"" },
            peg$c13 = function peg$c13(v) {
            return v;
        },
            peg$c14 = function peg$c14(value) {
            return ["comment", escapeString(trimEnds(value.join("")))];
        },
            peg$c15 = "<script",
            peg$c16 = { type: "literal", value: "<script", description: "\"<script\"" },
            peg$c17 = "</script>",
            peg$c18 = { type: "literal", value: "</script>", description: "\"</script>\"" },
            peg$c19 = function peg$c19(attributes, content) {
            return ["element", "script", attributes, [["text", escapeString(content.join(""))]]];
        },
            peg$c20 = function peg$c20() {
            return text();
        },
            peg$c21 = "<",
            peg$c22 = { type: "literal", value: "<", description: "\"<\"" },
            peg$c23 = "area",
            peg$c24 = { type: "literal", value: "area", description: "\"area\"" },
            peg$c25 = "base",
            peg$c26 = { type: "literal", value: "base", description: "\"base\"" },
            peg$c27 = "br",
            peg$c28 = { type: "literal", value: "br", description: "\"br\"" },
            peg$c29 = "col",
            peg$c30 = { type: "literal", value: "col", description: "\"col\"" },
            peg$c31 = "command",
            peg$c32 = { type: "literal", value: "command", description: "\"command\"" },
            peg$c33 = "embed",
            peg$c34 = { type: "literal", value: "embed", description: "\"embed\"" },
            peg$c35 = "hr",
            peg$c36 = { type: "literal", value: "hr", description: "\"hr\"" },
            peg$c37 = "img",
            peg$c38 = { type: "literal", value: "img", description: "\"img\"" },
            peg$c39 = "input",
            peg$c40 = { type: "literal", value: "input", description: "\"input\"" },
            peg$c41 = "keygen",
            peg$c42 = { type: "literal", value: "keygen", description: "\"keygen\"" },
            peg$c43 = "link",
            peg$c44 = { type: "literal", value: "link", description: "\"link\"" },
            peg$c45 = "meta",
            peg$c46 = { type: "literal", value: "meta", description: "\"meta\"" },
            peg$c47 = "param",
            peg$c48 = { type: "literal", value: "param", description: "\"param\"" },
            peg$c49 = "source",
            peg$c50 = { type: "literal", value: "source", description: "\"source\"" },
            peg$c51 = "track",
            peg$c52 = { type: "literal", value: "track", description: "\"track\"" },
            peg$c53 = "wbr",
            peg$c54 = { type: "literal", value: "wbr", description: "\"wbr\"" },
            peg$c55 = "/>",
            peg$c56 = { type: "literal", value: "/>", description: "\"/>\"" },
            peg$c57 = function peg$c57(nodeName, attributes, endTag) {
            if (endTag && nodeName != endTag.name) {
                expected("</" + nodeName + ">");
            }
            return ["element", nodeName, attributes, []];
        },
            peg$c58 = "</",
            peg$c59 = { type: "literal", value: "</", description: "\"</\"" },
            peg$c60 = function peg$c60(name) {
            return {
                name: name
            };
        },
            peg$c61 = function peg$c61(startTag, children, endTag) {
            if (startTag.name != endTag.name) {
                expected("</" + startTag.name + ">");
            }
            return ["element", startTag.name, startTag.attributes, children];
        },
            peg$c62 = function peg$c62(value) {
            return ["text", escapeString(trimNewLineChars(value.join("")))];
        },
            peg$c63 = "{{",
            peg$c64 = { type: "literal", value: "{{", description: "\"{{\"" },
            peg$c65 = function peg$c65(info) {
            return info;
        },
            peg$c66 = function peg$c66(info) {
            return ["element", info.name, info.attributes, []];
        },
            peg$c67 = function peg$c67(name, attrs) {
            return {
                name: name,
                attributes: attrs
            };
        },
            peg$c68 = function peg$c68(attributes) {
            return attributes;
        },
            peg$c69 = /^[a-zA-Z0-9:_.\-]/,
            peg$c70 = { type: "class", value: "[a-zA-Z0-9:_\\.\\-]", description: "[a-zA-Z0-9:_\\.\\-]" },
            peg$c71 = function peg$c71(word) {
            return word.join("");
        },
            peg$c72 = "=",
            peg$c73 = { type: "literal", value: "=", description: "\"=\"" },
            peg$c74 = function peg$c74(name, values) {
            return ["attribute", name, values];
        },
            peg$c75 = function peg$c75(name, property) {
            return ["property", name, property];
        },
            peg$c76 = function peg$c76(name) {
            return ['attribute', name, []];
        },
            peg$c77 = "\"",
            peg$c78 = { type: "literal", value: "\"", description: "\"\\\"\"" },
            peg$c79 = /^[^"]/,
            peg$c80 = { type: "class", value: "[^\"]", description: "[^\"]" },
            peg$c81 = function peg$c81() {
            return ["string", text()];
        },
            peg$c82 = function peg$c82(values) {
            return attrValues(values);
        },
            peg$c83 = "'",
            peg$c84 = { type: "literal", value: "'", description: "\"'\"" },
            peg$c85 = /^[^']/,
            peg$c86 = { type: "class", value: "[^']", description: "[^']" },
            peg$c87 = "}}",
            peg$c88 = { type: "literal", value: "}}", description: "\"}}\"" },
            peg$c89 = function peg$c89(value) {
            return ["script", value];
        },
            peg$c90 = function peg$c90(script) {
            return ["block", script[1]];
        },
            peg$c91 = "?",
            peg$c92 = { type: "literal", value: "?", description: "\"?\"" },
            peg$c93 = ":",
            peg$c94 = { type: "literal", value: ":", description: "\":\"" },
            peg$c95 = function peg$c95(condition, left, right) {
            return ["condition", condition, left, right];
        },
            peg$c96 = "(",
            peg$c97 = { type: "literal", value: "(", description: "\"(\"" },
            peg$c98 = ")",
            peg$c99 = { type: "literal", value: ")", description: "\")\"" },
            peg$c100 = function peg$c100(params) {
            return params;
        },
            peg$c101 = "()",
            peg$c102 = { type: "literal", value: "()", description: "\"()\"" },
            peg$c103 = function peg$c103() {
            return [];
        },
            peg$c104 = ",",
            peg$c105 = { type: "literal", value: ",", description: "\",\"" },
            peg$c106 = function peg$c106(param1, rest) {
            return [param1].concat(rest.map(function (v) {
                return v[1];
            }));
        },
            peg$c107 = function peg$c107(left, right) {
            return ["assign", left, right];
        },
            peg$c108 = "&&",
            peg$c109 = { type: "literal", value: "&&", description: "\"&&\"" },
            peg$c110 = "||",
            peg$c111 = { type: "literal", value: "||", description: "\"||\"" },
            peg$c112 = "===",
            peg$c113 = { type: "literal", value: "===", description: "\"===\"" },
            peg$c114 = "==",
            peg$c115 = { type: "literal", value: "==", description: "\"==\"" },
            peg$c116 = "!==",
            peg$c117 = { type: "literal", value: "!==", description: "\"!==\"" },
            peg$c118 = "!=",
            peg$c119 = { type: "literal", value: "!=", description: "\"!=\"" },
            peg$c120 = ">==",
            peg$c121 = { type: "literal", value: ">==", description: "\">==\"" },
            peg$c122 = ">=",
            peg$c123 = { type: "literal", value: ">=", description: "\">=\"" },
            peg$c124 = "<==",
            peg$c125 = { type: "literal", value: "<==", description: "\"<==\"" },
            peg$c126 = "<=",
            peg$c127 = { type: "literal", value: "<=", description: "\"<=\"" },
            peg$c128 = "+",
            peg$c129 = { type: "literal", value: "+", description: "\"+\"" },
            peg$c130 = "-",
            peg$c131 = { type: "literal", value: "-", description: "\"-\"" },
            peg$c132 = "%",
            peg$c133 = { type: "literal", value: "%", description: "\"%\"" },
            peg$c134 = "*",
            peg$c135 = { type: "literal", value: "*", description: "\"*\"" },
            peg$c136 = "/",
            peg$c137 = { type: "literal", value: "/", description: "\"/\"" },
            peg$c138 = function peg$c138(left, operator, right) {
            return ["operator", operator, left, right];
        },
            peg$c139 = function peg$c139(value) {
            return value;
        },
            peg$c140 = function peg$c140(expression, modifiers) {
            for (var i = 0, n = modifiers.length; i < n; i++) {
                expression = ["modifier", modifiers[i].name, [expression].concat(modifiers[i].parameters)];
            }
            return expression;
        },
            peg$c141 = "|",
            peg$c142 = { type: "literal", value: "|", description: "\"|\"" },
            peg$c143 = function peg$c143(name, parameters) {
            return {
                name: name,
                parameters: parameters || []
            };
        },
            peg$c144 = function peg$c144(context) {
            return context;
        },
            peg$c145 = "!",
            peg$c146 = { type: "literal", value: "!", description: "\"!\"" },
            peg$c147 = function peg$c147(not, value) {
            return ["not", value];
        },
            peg$c148 = function peg$c148(not, value) {
            return ["negative", value];
        },
            peg$c149 = /^[0-9]/,
            peg$c150 = { type: "class", value: "[0-9]", description: "[0-9]" },
            peg$c151 = function peg$c151(value) {
            return ["literal", parseFloat(text())];
        },
            peg$c152 = ".",
            peg$c153 = { type: "literal", value: ".", description: "\".\"" },
            peg$c154 = function peg$c154(group) {
            return ["group", group];
        },
            peg$c155 = function peg$c155(expression) {
            return expression;
        },
            peg$c156 = "true",
            peg$c157 = { type: "literal", value: "true", description: "\"true\"" },
            peg$c158 = "false",
            peg$c159 = { type: "literal", value: "false", description: "\"false\"" },
            peg$c160 = function peg$c160(value) {
            return ["literal", value === "true"];
        },
            peg$c161 = "undefined",
            peg$c162 = { type: "literal", value: "undefined", description: "\"undefined\"" },
            peg$c163 = function peg$c163() {
            return ["literal", void 0];
        },
            peg$c164 = "NaN",
            peg$c165 = { type: "literal", value: "NaN", description: "\"NaN\"" },
            peg$c166 = function peg$c166() {
            return ["literal", NaN];
        },
            peg$c167 = "Infinity",
            peg$c168 = { type: "literal", value: "Infinity", description: "\"Infinity\"" },
            peg$c169 = function peg$c169() {
            return ["literal", Infinity];
        },
            peg$c170 = "null",
            peg$c171 = { type: "literal", value: "null", description: "\"null\"" },
            peg$c172 = "NULL",
            peg$c173 = { type: "literal", value: "NULL", description: "\"NULL\"" },
            peg$c174 = function peg$c174() {
            return ["literal", null];
        },
            peg$c175 = function peg$c175(reference, parameters) {
            return ["call", reference, parameters];
        },
            peg$c176 = "^",
            peg$c177 = { type: "literal", value: "^", description: "\"^\"" },
            peg$c178 = "~>",
            peg$c179 = { type: "literal", value: "~>", description: "\"~>\"" },
            peg$c180 = "<~>",
            peg$c181 = { type: "literal", value: "<~>", description: "\"<~>\"" },
            peg$c182 = "~",
            peg$c183 = { type: "literal", value: "~", description: "\"~\"" },
            peg$c184 = "<~",
            peg$c185 = { type: "literal", value: "<~", description: "\"<~\"" },
            peg$c186 = function peg$c186(bindingType, reference, path) {
            return ["reference", [reference].concat(path), bindingType];
        },
            peg$c187 = function peg$c187(name) {
            return name;
        },
            peg$c188 = "[",
            peg$c189 = { type: "literal", value: "[", description: "\"[\"" },
            peg$c190 = "]",
            peg$c191 = { type: "literal", value: "]", description: "\"]\"" },
            peg$c192 = function peg$c192(key) {
            return key;
        },
            peg$c193 = /^[a-zA-Z_$0-9]/,
            peg$c194 = { type: "class", value: "[a-zA-Z_$0-9]", description: "[a-zA-Z_$0-9]" },
            peg$c195 = function peg$c195(name) {
            return text();
        },
            peg$c196 = "{",
            peg$c197 = { type: "literal", value: "{", description: "\"{\"" },
            peg$c198 = "}",
            peg$c199 = { type: "literal", value: "}", description: "\"}\"" },
            peg$c200 = function peg$c200(values) {
            return ["hash", values];
        },
            peg$c201 = function peg$c201(values) {
            var s = {};
            for (var i = 0, n = values.length; i < n; i++) {
                s[values[i].key] = values[i].value;
            }
            return s;
        },
            peg$c202 = function peg$c202(firstValue, additionalValues) {
            return [firstValue].concat(additionalValues.length ? additionalValues[0][1] : []);
        },
            peg$c203 = function peg$c203(key, value) {
            return {
                key: key,
                value: value
            };
        },
            peg$c204 = function peg$c204(key) {
            return key[1];
        },
            peg$c205 = function peg$c205(key) {
            return key;
        },
            peg$c206 = { type: "other", description: "string" },
            peg$c207 = function peg$c207(chars) {
            return ["string", chars.join("")];
        },
            peg$c208 = "\\",
            peg$c209 = { type: "literal", value: "\\", description: "\"\\\\\"" },
            peg$c210 = function peg$c210() {
            return text();
        },
            peg$c211 = "\\\"",
            peg$c212 = { type: "literal", value: "\\\"", description: "\"\\\\\\\"\"" },
            peg$c213 = "\\'",
            peg$c214 = { type: "literal", value: "\\'", description: "\"\\\\'\"" },
            peg$c215 = { type: "any", description: "any character" },
            peg$c216 = /^[a-zA-Z]/,
            peg$c217 = { type: "class", value: "[a-zA-Z]", description: "[a-zA-Z]" },
            peg$c218 = function peg$c218(chars) {
            return chars.join("");
        },
            peg$c219 = /^[ \n\r\t]/,
            peg$c220 = { type: "class", value: "[ \\n\\r\\t]", description: "[ \\n\\r\\t]" },
            peg$currPos = 0,
            peg$savedPos = 0,
            peg$posDetailsCache = [{ line: 1, column: 1, seenCR: false }],
            peg$maxFailPos = 0,
            peg$maxFailExpected = [],
            peg$silentFails = 0,
            peg$result;
        if ("startRule" in options) {
            if (!(options.startRule in peg$startRuleFunctions)) {
                throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
            }
            peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
        }
        function text() {
            return input.substring(peg$savedPos, peg$currPos);
        }
        function location() {
            return peg$computeLocation(peg$savedPos, peg$currPos);
        }
        function expected(description) {
            throw peg$buildException(null, [{ type: "other", description: description }], input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));
        }
        function error(message) {
            throw peg$buildException(message, null, input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));
        }
        function peg$computePosDetails(pos) {
            var details = peg$posDetailsCache[pos],
                p,
                ch;
            if (details) {
                return details;
            } else {
                p = pos - 1;
                while (!peg$posDetailsCache[p]) {
                    p--;
                }
                details = peg$posDetailsCache[p];
                details = {
                    line: details.line,
                    column: details.column,
                    seenCR: details.seenCR
                };
                while (p < pos) {
                    ch = input.charAt(p);
                    if (ch === "\n") {
                        if (!details.seenCR) {
                            details.line++;
                        }
                        details.column = 1;
                        details.seenCR = false;
                    } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
                        details.line++;
                        details.column = 1;
                        details.seenCR = true;
                    } else {
                        details.column++;
                        details.seenCR = false;
                    }
                    p++;
                }
                peg$posDetailsCache[pos] = details;
                return details;
            }
        }
        function peg$computeLocation(startPos, endPos) {
            var startPosDetails = peg$computePosDetails(startPos),
                endPosDetails = peg$computePosDetails(endPos);
            return {
                start: {
                    offset: startPos,
                    line: startPosDetails.line,
                    column: startPosDetails.column
                },
                end: {
                    offset: endPos,
                    line: endPosDetails.line,
                    column: endPosDetails.column
                }
            };
        }
        function peg$fail(expected) {
            if (peg$currPos < peg$maxFailPos) {
                return;
            }
            if (peg$currPos > peg$maxFailPos) {
                peg$maxFailPos = peg$currPos;
                peg$maxFailExpected = [];
            }
            peg$maxFailExpected.push(expected);
        }
        function peg$buildException(message, expected, found, location) {
            function cleanupExpected(expected) {
                var i = 1;
                expected.sort(function (a, b) {
                    if (a.description < b.description) {
                        return -1;
                    } else if (a.description > b.description) {
                        return 1;
                    } else {
                        return 0;
                    }
                });
                while (i < expected.length) {
                    if (expected[i - 1] === expected[i]) {
                        expected.splice(i, 1);
                    } else {
                        i++;
                    }
                }
            }
            function buildMessage(expected, found) {
                function stringEscape(s) {
                    function hex(ch) {
                        return ch.charCodeAt(0).toString(16).toUpperCase();
                    }
                    return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\x08/g, '\\b').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) {
                        return '\\x0' + hex(ch);
                    }).replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) {
                        return '\\x' + hex(ch);
                    }).replace(/[\u0100-\u0FFF]/g, function (ch) {
                        return "\\u0" + hex(ch);
                    }).replace(/[\u1000-\uFFFF]/g, function (ch) {
                        return "\\u" + hex(ch);
                    });
                }
                var expectedDescs = new Array(expected.length),
                    expectedDesc,
                    foundDesc,
                    i;
                for (i = 0; i < expected.length; i++) {
                    expectedDescs[i] = expected[i].description;
                }
                expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0];
                foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
                return "Expected " + expectedDesc + " but " + foundDesc + " found.";
            }
            if (expected !== null) {
                cleanupExpected(expected);
            }
            return new peg$SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, location);
        }
        function peg$parseStart() {
            var s0;
            s0 = peg$parseTemplate();
            return s0;
        }
        function peg$parseTemplate() {
            var s0, s1;
            s0 = peg$currPos;
            s1 = peg$parseChildNodes();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parseDocType() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c1) {
                s1 = peg$c1;
                peg$currPos += 9;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c2);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    if (peg$c3.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c4);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            if (peg$c3.test(input.charAt(peg$currPos))) {
                                s4 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c4);
                                }
                            }
                        }
                    } else {
                        s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 62) {
                                s5 = peg$c5;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c6);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c7(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseChildNodes() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseVoidElement();
            if (s2 === peg$FAILED) {
                s2 = peg$parseScriptStart();
                if (s2 === peg$FAILED) {
                    s2 = peg$parseElementNode();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parseCommentNode();
                        if (s2 === peg$FAILED) {
                            s2 = peg$parseTextNode();
                            if (s2 === peg$FAILED) {
                                s2 = peg$parseBlockBinding();
                            }
                        }
                    }
                }
            }
            while (s2 !== peg$FAILED) {
                s1.push(s2);
                s2 = peg$parseVoidElement();
                if (s2 === peg$FAILED) {
                    s2 = peg$parseScriptStart();
                    if (s2 === peg$FAILED) {
                        s2 = peg$parseElementNode();
                        if (s2 === peg$FAILED) {
                            s2 = peg$parseCommentNode();
                            if (s2 === peg$FAILED) {
                                s2 = peg$parseTextNode();
                                if (s2 === peg$FAILED) {
                                    s2 = peg$parseBlockBinding();
                                }
                            }
                        }
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c8(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parseCommentNode() {
            var s0, s1, s2, s3, s4, s5, s6;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c9) {
                    s2 = peg$c9;
                    peg$currPos += 4;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c10);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = [];
                    s4 = peg$currPos;
                    s5 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 3) === peg$c11) {
                        s6 = peg$c11;
                        peg$currPos += 3;
                    } else {
                        s6 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c12);
                        }
                    }
                    peg$silentFails--;
                    if (s6 === peg$FAILED) {
                        s5 = void 0;
                    } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                        s6 = peg$parseSourceCharacter();
                        if (s6 !== peg$FAILED) {
                            peg$savedPos = s4;
                            s5 = peg$c13(s6);
                            s4 = s5;
                        } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        while (s4 !== peg$FAILED) {
                            s3.push(s4);
                            s4 = peg$currPos;
                            s5 = peg$currPos;
                            peg$silentFails++;
                            if (input.substr(peg$currPos, 3) === peg$c11) {
                                s6 = peg$c11;
                                peg$currPos += 3;
                            } else {
                                s6 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c12);
                                }
                            }
                            peg$silentFails--;
                            if (s6 === peg$FAILED) {
                                s5 = void 0;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                                s6 = peg$parseSourceCharacter();
                                if (s6 !== peg$FAILED) {
                                    peg$savedPos = s4;
                                    s5 = peg$c13(s6);
                                    s4 = s5;
                                } else {
                                    peg$currPos = s4;
                                    s4 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s4;
                                s4 = peg$FAILED;
                            }
                        }
                    } else {
                        s3 = peg$FAILED;
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c11) {
                            s4 = peg$c11;
                            peg$currPos += 3;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c12);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c14(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseDocType();
            }
            return s0;
        }
        function peg$parseScriptStart() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 7) === peg$c15) {
                    s2 = peg$c15;
                    peg$currPos += 7;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c16);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseTagAttributes();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s4 = peg$c5;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c6);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = [];
                            s6 = peg$parseScriptEnd();
                            if (s6 !== peg$FAILED) {
                                while (s6 !== peg$FAILED) {
                                    s5.push(s6);
                                    s6 = peg$parseScriptEnd();
                                }
                            } else {
                                s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                                if (input.substr(peg$currPos, 9) === peg$c17) {
                                    s6 = peg$c17;
                                    peg$currPos += 9;
                                } else {
                                    s6 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c18);
                                    }
                                }
                                if (s6 !== peg$FAILED) {
                                    s7 = peg$parse_();
                                    if (s7 !== peg$FAILED) {
                                        peg$savedPos = s0;
                                        s1 = peg$c19(s3, s5);
                                        s0 = s1;
                                    } else {
                                        peg$currPos = s0;
                                        s0 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseScriptEnd() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 9) === peg$c17) {
                s2 = peg$c17;
                peg$currPos += 9;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c18);
                }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
                s1 = void 0;
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseSourceCharacter();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c20();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseVoidElement() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 60) {
                s1 = peg$c21;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c22);
                }
            }
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c23) {
                    s2 = peg$c23;
                    peg$currPos += 4;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c24);
                    }
                }
                if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c25) {
                        s2 = peg$c25;
                        peg$currPos += 4;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c26);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c27) {
                            s2 = peg$c27;
                            peg$currPos += 2;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c28);
                            }
                        }
                        if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 3) === peg$c29) {
                                s2 = peg$c29;
                                peg$currPos += 3;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c30);
                                }
                            }
                            if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 7) === peg$c31) {
                                    s2 = peg$c31;
                                    peg$currPos += 7;
                                } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c32);
                                    }
                                }
                                if (s2 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 5) === peg$c33) {
                                        s2 = peg$c33;
                                        peg$currPos += 5;
                                    } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c34);
                                        }
                                    }
                                    if (s2 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 2) === peg$c35) {
                                            s2 = peg$c35;
                                            peg$currPos += 2;
                                        } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c36);
                                            }
                                        }
                                        if (s2 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 3) === peg$c37) {
                                                s2 = peg$c37;
                                                peg$currPos += 3;
                                            } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c38);
                                                }
                                            }
                                            if (s2 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 5) === peg$c39) {
                                                    s2 = peg$c39;
                                                    peg$currPos += 5;
                                                } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c40);
                                                    }
                                                }
                                                if (s2 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 6) === peg$c41) {
                                                        s2 = peg$c41;
                                                        peg$currPos += 6;
                                                    } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c42);
                                                        }
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 4) === peg$c43) {
                                                            s2 = peg$c43;
                                                            peg$currPos += 4;
                                                        } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c44);
                                                            }
                                                        }
                                                        if (s2 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 4) === peg$c45) {
                                                                s2 = peg$c45;
                                                                peg$currPos += 4;
                                                            } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c46);
                                                                }
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 5) === peg$c47) {
                                                                    s2 = peg$c47;
                                                                    peg$currPos += 5;
                                                                } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c48);
                                                                    }
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 6) === peg$c49) {
                                                                        s2 = peg$c49;
                                                                        peg$currPos += 6;
                                                                    } else {
                                                                        s2 = peg$FAILED;
                                                                        if (peg$silentFails === 0) {
                                                                            peg$fail(peg$c50);
                                                                        }
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 5) === peg$c51) {
                                                                            s2 = peg$c51;
                                                                            peg$currPos += 5;
                                                                        } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) {
                                                                                peg$fail(peg$c52);
                                                                            }
                                                                        }
                                                                        if (s2 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 3) === peg$c53) {
                                                                                s2 = peg$c53;
                                                                                peg$currPos += 3;
                                                                            } else {
                                                                                s2 = peg$FAILED;
                                                                                if (peg$silentFails === 0) {
                                                                                    peg$fail(peg$c54);
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseTagAttributes();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s4 = peg$c5;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c6);
                            }
                        }
                        if (s4 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c55) {
                                s4 = peg$c55;
                                peg$currPos += 2;
                            } else {
                                s4 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c56);
                                }
                            }
                        }
                        if (s4 === peg$FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseEndVoidTag();
                            if (s5 === peg$FAILED) {
                                s5 = null;
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c57(s2, s3, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseEndVoidTag() {
            var s0, s1, s2, s3, s4;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c58) {
                    s2 = peg$c58;
                    peg$currPos += 2;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c59);
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 4) === peg$c23) {
                        s3 = peg$c23;
                        peg$currPos += 4;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c24);
                        }
                    }
                    if (s3 === peg$FAILED) {
                        if (input.substr(peg$currPos, 4) === peg$c25) {
                            s3 = peg$c25;
                            peg$currPos += 4;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c26);
                            }
                        }
                        if (s3 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c27) {
                                s3 = peg$c27;
                                peg$currPos += 2;
                            } else {
                                s3 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c28);
                                }
                            }
                            if (s3 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c29) {
                                    s3 = peg$c29;
                                    peg$currPos += 3;
                                } else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c30);
                                    }
                                }
                                if (s3 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 7) === peg$c31) {
                                        s3 = peg$c31;
                                        peg$currPos += 7;
                                    } else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c32);
                                        }
                                    }
                                    if (s3 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 5) === peg$c33) {
                                            s3 = peg$c33;
                                            peg$currPos += 5;
                                        } else {
                                            s3 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c34);
                                            }
                                        }
                                        if (s3 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c35) {
                                                s3 = peg$c35;
                                                peg$currPos += 2;
                                            } else {
                                                s3 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c36);
                                                }
                                            }
                                            if (s3 === peg$FAILED) {
                                                if (input.substr(peg$currPos, 3) === peg$c37) {
                                                    s3 = peg$c37;
                                                    peg$currPos += 3;
                                                } else {
                                                    s3 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c38);
                                                    }
                                                }
                                                if (s3 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 5) === peg$c39) {
                                                        s3 = peg$c39;
                                                        peg$currPos += 5;
                                                    } else {
                                                        s3 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c40);
                                                        }
                                                    }
                                                    if (s3 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 6) === peg$c41) {
                                                            s3 = peg$c41;
                                                            peg$currPos += 6;
                                                        } else {
                                                            s3 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c42);
                                                            }
                                                        }
                                                        if (s3 === peg$FAILED) {
                                                            if (input.substr(peg$currPos, 4) === peg$c43) {
                                                                s3 = peg$c43;
                                                                peg$currPos += 4;
                                                            } else {
                                                                s3 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c44);
                                                                }
                                                            }
                                                            if (s3 === peg$FAILED) {
                                                                if (input.substr(peg$currPos, 4) === peg$c45) {
                                                                    s3 = peg$c45;
                                                                    peg$currPos += 4;
                                                                } else {
                                                                    s3 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c46);
                                                                    }
                                                                }
                                                                if (s3 === peg$FAILED) {
                                                                    if (input.substr(peg$currPos, 5) === peg$c47) {
                                                                        s3 = peg$c47;
                                                                        peg$currPos += 5;
                                                                    } else {
                                                                        s3 = peg$FAILED;
                                                                        if (peg$silentFails === 0) {
                                                                            peg$fail(peg$c48);
                                                                        }
                                                                    }
                                                                    if (s3 === peg$FAILED) {
                                                                        if (input.substr(peg$currPos, 6) === peg$c49) {
                                                                            s3 = peg$c49;
                                                                            peg$currPos += 6;
                                                                        } else {
                                                                            s3 = peg$FAILED;
                                                                            if (peg$silentFails === 0) {
                                                                                peg$fail(peg$c50);
                                                                            }
                                                                        }
                                                                        if (s3 === peg$FAILED) {
                                                                            if (input.substr(peg$currPos, 5) === peg$c51) {
                                                                                s3 = peg$c51;
                                                                                peg$currPos += 5;
                                                                            } else {
                                                                                s3 = peg$FAILED;
                                                                                if (peg$silentFails === 0) {
                                                                                    peg$fail(peg$c52);
                                                                                }
                                                                            }
                                                                            if (s3 === peg$FAILED) {
                                                                                if (input.substr(peg$currPos, 3) === peg$c53) {
                                                                                    s3 = peg$c53;
                                                                                    peg$currPos += 3;
                                                                                } else {
                                                                                    s3 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) {
                                                                                        peg$fail(peg$c54);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s4 = peg$c5;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c6);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c60(s3);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseElementNode() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parseStartTag();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseChildNodes();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseEndTag();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c61(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseStartEndTag();
            }
            return s0;
        }
        function peg$parseTextNode() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            s2 = peg$parseTextCharacter();
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    s2 = peg$parseTextCharacter();
                }
            } else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c62(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parseTextCharacter() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 60) {
                s2 = peg$c21;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c22);
                }
            }
            if (s2 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c63) {
                    s2 = peg$c63;
                    peg$currPos += 2;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c64);
                    }
                }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
                s1 = void 0;
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseSourceCharacter();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c20();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseStartTag() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                    s2 = peg$c21;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c22);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseTagInfo();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 62) {
                            s4 = peg$c5;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c6);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c65(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseStartEndTag() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 60) {
                    s2 = peg$c21;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c22);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseTagInfo();
                    if (s3 !== peg$FAILED) {
                        if (input.substr(peg$currPos, 2) === peg$c55) {
                            s4 = peg$c55;
                            peg$currPos += 2;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c56);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c66(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseTagInfo() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parseTagName();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseTagAttributes();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c67(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseTagAttributes() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseAttribute();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseAttribute();
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c68(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseEndTag() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c58) {
                s1 = peg$c58;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c59);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseTagName();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 62) {
                        s3 = peg$c5;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c6);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c60(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseTagName() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c69.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c70);
                    }
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c69.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c70);
                            }
                        }
                    }
                } else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c71(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseAttribute() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parseTagName();
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 61) {
                        s3 = peg$c72;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c73);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseAttributeValues();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c74(s1, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseTagName();
                if (s1 !== peg$FAILED) {
                    s2 = peg$parse_();
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 61) {
                            s3 = peg$c72;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c73);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            s4 = peg$parse_();
                            if (s4 !== peg$FAILED) {
                                s5 = peg$parseTextBinding();
                                if (s5 !== peg$FAILED) {
                                    peg$savedPos = s0;
                                    s1 = peg$c75(s1, s5);
                                    s0 = s1;
                                } else {
                                    peg$currPos = s0;
                                    s0 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = peg$parseTagName();
                    if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c76(s1);
                    }
                    s0 = s1;
                }
            }
            return s0;
        }
        function peg$parseAttributeValues() {
            var s0, s1, s2, s3, s4, s5, s6, s7;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
                s1 = peg$c77;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c78);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseTextBinding();
                if (s3 === peg$FAILED) {
                    s3 = peg$currPos;
                    s4 = [];
                    s5 = peg$currPos;
                    s6 = peg$currPos;
                    peg$silentFails++;
                    if (input.substr(peg$currPos, 2) === peg$c63) {
                        s7 = peg$c63;
                        peg$currPos += 2;
                    } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c64);
                        }
                    }
                    peg$silentFails--;
                    if (s7 === peg$FAILED) {
                        s6 = void 0;
                    } else {
                        peg$currPos = s6;
                        s6 = peg$FAILED;
                    }
                    if (s6 !== peg$FAILED) {
                        if (peg$c79.test(input.charAt(peg$currPos))) {
                            s7 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c80);
                            }
                        }
                        if (s7 !== peg$FAILED) {
                            s6 = [s6, s7];
                            s5 = s6;
                        } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s5;
                        s5 = peg$FAILED;
                    }
                    if (s5 !== peg$FAILED) {
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$currPos;
                            s6 = peg$currPos;
                            peg$silentFails++;
                            if (input.substr(peg$currPos, 2) === peg$c63) {
                                s7 = peg$c63;
                                peg$currPos += 2;
                            } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c64);
                                }
                            }
                            peg$silentFails--;
                            if (s7 === peg$FAILED) {
                                s6 = void 0;
                            } else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                            }
                            if (s6 !== peg$FAILED) {
                                if (peg$c79.test(input.charAt(peg$currPos))) {
                                    s7 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c80);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        }
                    } else {
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s3;
                        s4 = peg$c81();
                    }
                    s3 = s4;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseTextBinding();
                    if (s3 === peg$FAILED) {
                        s3 = peg$currPos;
                        s4 = [];
                        s5 = peg$currPos;
                        s6 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 2) === peg$c63) {
                            s7 = peg$c63;
                            peg$currPos += 2;
                        } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c64);
                            }
                        }
                        peg$silentFails--;
                        if (s7 === peg$FAILED) {
                            s6 = void 0;
                        } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                        }
                        if (s6 !== peg$FAILED) {
                            if (peg$c79.test(input.charAt(peg$currPos))) {
                                s7 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c80);
                                }
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$currPos;
                                s6 = peg$currPos;
                                peg$silentFails++;
                                if (input.substr(peg$currPos, 2) === peg$c63) {
                                    s7 = peg$c63;
                                    peg$currPos += 2;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c64);
                                    }
                                }
                                peg$silentFails--;
                                if (s7 === peg$FAILED) {
                                    s6 = void 0;
                                } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                }
                                if (s6 !== peg$FAILED) {
                                    if (peg$c79.test(input.charAt(peg$currPos))) {
                                        s7 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c80);
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s6 = [s6, s7];
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                        } else {
                            s4 = peg$FAILED;
                        }
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s4 = peg$c81();
                        }
                        s3 = s4;
                    }
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                        s3 = peg$c77;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c78);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c82(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                    s1 = peg$c83;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c84);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseTextBinding();
                    if (s3 === peg$FAILED) {
                        s3 = peg$currPos;
                        s4 = [];
                        s5 = peg$currPos;
                        s6 = peg$currPos;
                        peg$silentFails++;
                        if (input.substr(peg$currPos, 2) === peg$c63) {
                            s7 = peg$c63;
                            peg$currPos += 2;
                        } else {
                            s7 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c64);
                            }
                        }
                        peg$silentFails--;
                        if (s7 === peg$FAILED) {
                            s6 = void 0;
                        } else {
                            peg$currPos = s6;
                            s6 = peg$FAILED;
                        }
                        if (s6 !== peg$FAILED) {
                            if (peg$c85.test(input.charAt(peg$currPos))) {
                                s7 = input.charAt(peg$currPos);
                                peg$currPos++;
                            } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c86);
                                }
                            }
                            if (s7 !== peg$FAILED) {
                                s6 = [s6, s7];
                                s5 = s6;
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s5;
                            s5 = peg$FAILED;
                        }
                        if (s5 !== peg$FAILED) {
                            while (s5 !== peg$FAILED) {
                                s4.push(s5);
                                s5 = peg$currPos;
                                s6 = peg$currPos;
                                peg$silentFails++;
                                if (input.substr(peg$currPos, 2) === peg$c63) {
                                    s7 = peg$c63;
                                    peg$currPos += 2;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c64);
                                    }
                                }
                                peg$silentFails--;
                                if (s7 === peg$FAILED) {
                                    s6 = void 0;
                                } else {
                                    peg$currPos = s6;
                                    s6 = peg$FAILED;
                                }
                                if (s6 !== peg$FAILED) {
                                    if (peg$c85.test(input.charAt(peg$currPos))) {
                                        s7 = input.charAt(peg$currPos);
                                        peg$currPos++;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c86);
                                        }
                                    }
                                    if (s7 !== peg$FAILED) {
                                        s6 = [s6, s7];
                                        s5 = s6;
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            }
                        } else {
                            s4 = peg$FAILED;
                        }
                        if (s4 !== peg$FAILED) {
                            peg$savedPos = s3;
                            s4 = peg$c81();
                        }
                        s3 = s4;
                    }
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseTextBinding();
                        if (s3 === peg$FAILED) {
                            s3 = peg$currPos;
                            s4 = [];
                            s5 = peg$currPos;
                            s6 = peg$currPos;
                            peg$silentFails++;
                            if (input.substr(peg$currPos, 2) === peg$c63) {
                                s7 = peg$c63;
                                peg$currPos += 2;
                            } else {
                                s7 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c64);
                                }
                            }
                            peg$silentFails--;
                            if (s7 === peg$FAILED) {
                                s6 = void 0;
                            } else {
                                peg$currPos = s6;
                                s6 = peg$FAILED;
                            }
                            if (s6 !== peg$FAILED) {
                                if (peg$c85.test(input.charAt(peg$currPos))) {
                                    s7 = input.charAt(peg$currPos);
                                    peg$currPos++;
                                } else {
                                    s7 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c86);
                                    }
                                }
                                if (s7 !== peg$FAILED) {
                                    s6 = [s6, s7];
                                    s5 = s6;
                                } else {
                                    peg$currPos = s5;
                                    s5 = peg$FAILED;
                                }
                            } else {
                                peg$currPos = s5;
                                s5 = peg$FAILED;
                            }
                            if (s5 !== peg$FAILED) {
                                while (s5 !== peg$FAILED) {
                                    s4.push(s5);
                                    s5 = peg$currPos;
                                    s6 = peg$currPos;
                                    peg$silentFails++;
                                    if (input.substr(peg$currPos, 2) === peg$c63) {
                                        s7 = peg$c63;
                                        peg$currPos += 2;
                                    } else {
                                        s7 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c64);
                                        }
                                    }
                                    peg$silentFails--;
                                    if (s7 === peg$FAILED) {
                                        s6 = void 0;
                                    } else {
                                        peg$currPos = s6;
                                        s6 = peg$FAILED;
                                    }
                                    if (s6 !== peg$FAILED) {
                                        if (peg$c85.test(input.charAt(peg$currPos))) {
                                            s7 = input.charAt(peg$currPos);
                                            peg$currPos++;
                                        } else {
                                            s7 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c86);
                                            }
                                        }
                                        if (s7 !== peg$FAILED) {
                                            s6 = [s6, s7];
                                            s5 = s6;
                                        } else {
                                            peg$currPos = s5;
                                            s5 = peg$FAILED;
                                        }
                                    } else {
                                        peg$currPos = s5;
                                        s5 = peg$FAILED;
                                    }
                                }
                            } else {
                                s4 = peg$FAILED;
                            }
                            if (s4 !== peg$FAILED) {
                                peg$savedPos = s3;
                                s4 = peg$c81();
                            }
                            s3 = s4;
                        }
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                            s3 = peg$c83;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c84);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c82(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            return s0;
        }
        function peg$parseTextBinding() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c63) {
                s1 = peg$c63;
                peg$currPos += 2;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c64);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseTernaryConditional();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c87) {
                                s5 = peg$c87;
                                peg$currPos += 2;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c88);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c89(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseBlockBinding() {
            var s0, s1;
            s0 = peg$currPos;
            s1 = peg$parseTextBinding();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c90(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parseTernaryConditional() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parseAssignment();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 63) {
                    s2 = peg$c91;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c92);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseTernaryConditional();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                            s4 = peg$c93;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c94);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseTernaryConditional();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c95(s1, s3, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseAssignment();
            }
            return s0;
        }
        function peg$parseParameters() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c96;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c97);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseInnerParameters();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                        s3 = peg$c98;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c99);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c100(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.substr(peg$currPos, 2) === peg$c101) {
                    s1 = peg$c101;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c102);
                    }
                }
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c103();
                }
                s0 = s1;
            }
            return s0;
        }
        function peg$parseInnerParameters() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parseTernaryConditional();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                    s4 = peg$c104;
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c105);
                    }
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseTernaryConditional();
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s4 = peg$c104;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c105);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseTernaryConditional();
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c106(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseAssignment() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parseObjectReference();
            if (s1 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 61) {
                    s2 = peg$c72;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c73);
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseAssignment();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c107(s1, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseOperation();
            }
            return s0;
        }
        function peg$parseOperation() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parseOperatable();
            if (s1 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c108) {
                    s2 = peg$c108;
                    peg$currPos += 2;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c109);
                    }
                }
                if (s2 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c110) {
                        s2 = peg$c110;
                        peg$currPos += 2;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c111);
                        }
                    }
                    if (s2 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c112) {
                            s2 = peg$c112;
                            peg$currPos += 3;
                        } else {
                            s2 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c113);
                            }
                        }
                        if (s2 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c114) {
                                s2 = peg$c114;
                                peg$currPos += 2;
                            } else {
                                s2 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c115);
                                }
                            }
                            if (s2 === peg$FAILED) {
                                if (input.substr(peg$currPos, 3) === peg$c116) {
                                    s2 = peg$c116;
                                    peg$currPos += 3;
                                } else {
                                    s2 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c117);
                                    }
                                }
                                if (s2 === peg$FAILED) {
                                    if (input.substr(peg$currPos, 2) === peg$c118) {
                                        s2 = peg$c118;
                                        peg$currPos += 2;
                                    } else {
                                        s2 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c119);
                                        }
                                    }
                                    if (s2 === peg$FAILED) {
                                        if (input.substr(peg$currPos, 3) === peg$c120) {
                                            s2 = peg$c120;
                                            peg$currPos += 3;
                                        } else {
                                            s2 = peg$FAILED;
                                            if (peg$silentFails === 0) {
                                                peg$fail(peg$c121);
                                            }
                                        }
                                        if (s2 === peg$FAILED) {
                                            if (input.substr(peg$currPos, 2) === peg$c122) {
                                                s2 = peg$c122;
                                                peg$currPos += 2;
                                            } else {
                                                s2 = peg$FAILED;
                                                if (peg$silentFails === 0) {
                                                    peg$fail(peg$c123);
                                                }
                                            }
                                            if (s2 === peg$FAILED) {
                                                if (input.charCodeAt(peg$currPos) === 62) {
                                                    s2 = peg$c5;
                                                    peg$currPos++;
                                                } else {
                                                    s2 = peg$FAILED;
                                                    if (peg$silentFails === 0) {
                                                        peg$fail(peg$c6);
                                                    }
                                                }
                                                if (s2 === peg$FAILED) {
                                                    if (input.substr(peg$currPos, 3) === peg$c124) {
                                                        s2 = peg$c124;
                                                        peg$currPos += 3;
                                                    } else {
                                                        s2 = peg$FAILED;
                                                        if (peg$silentFails === 0) {
                                                            peg$fail(peg$c125);
                                                        }
                                                    }
                                                    if (s2 === peg$FAILED) {
                                                        if (input.substr(peg$currPos, 2) === peg$c126) {
                                                            s2 = peg$c126;
                                                            peg$currPos += 2;
                                                        } else {
                                                            s2 = peg$FAILED;
                                                            if (peg$silentFails === 0) {
                                                                peg$fail(peg$c127);
                                                            }
                                                        }
                                                        if (s2 === peg$FAILED) {
                                                            if (input.charCodeAt(peg$currPos) === 60) {
                                                                s2 = peg$c21;
                                                                peg$currPos++;
                                                            } else {
                                                                s2 = peg$FAILED;
                                                                if (peg$silentFails === 0) {
                                                                    peg$fail(peg$c22);
                                                                }
                                                            }
                                                            if (s2 === peg$FAILED) {
                                                                if (input.charCodeAt(peg$currPos) === 43) {
                                                                    s2 = peg$c128;
                                                                    peg$currPos++;
                                                                } else {
                                                                    s2 = peg$FAILED;
                                                                    if (peg$silentFails === 0) {
                                                                        peg$fail(peg$c129);
                                                                    }
                                                                }
                                                                if (s2 === peg$FAILED) {
                                                                    if (input.charCodeAt(peg$currPos) === 45) {
                                                                        s2 = peg$c130;
                                                                        peg$currPos++;
                                                                    } else {
                                                                        s2 = peg$FAILED;
                                                                        if (peg$silentFails === 0) {
                                                                            peg$fail(peg$c131);
                                                                        }
                                                                    }
                                                                    if (s2 === peg$FAILED) {
                                                                        if (input.charCodeAt(peg$currPos) === 37) {
                                                                            s2 = peg$c132;
                                                                            peg$currPos++;
                                                                        } else {
                                                                            s2 = peg$FAILED;
                                                                            if (peg$silentFails === 0) {
                                                                                peg$fail(peg$c133);
                                                                            }
                                                                        }
                                                                        if (s2 === peg$FAILED) {
                                                                            if (input.charCodeAt(peg$currPos) === 42) {
                                                                                s2 = peg$c134;
                                                                                peg$currPos++;
                                                                            } else {
                                                                                s2 = peg$FAILED;
                                                                                if (peg$silentFails === 0) {
                                                                                    peg$fail(peg$c135);
                                                                                }
                                                                            }
                                                                            if (s2 === peg$FAILED) {
                                                                                if (input.charCodeAt(peg$currPos) === 47) {
                                                                                    s2 = peg$c136;
                                                                                    peg$currPos++;
                                                                                } else {
                                                                                    s2 = peg$FAILED;
                                                                                    if (peg$silentFails === 0) {
                                                                                        peg$fail(peg$c137);
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseOperation();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c138(s1, s2, s3);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseOperatable();
            }
            return s0;
        }
        function peg$parseOperatable() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseModifiers();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c139(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseModifiers() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parseNot();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseModifier();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseModifier();
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c140(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$parseFunctionCall();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseObjectReference();
                }
            }
            return s0;
        }
        function peg$parseModifier() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 124) {
                s1 = peg$c141;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c142);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseReferenceName();
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parseParameters();
                        if (s4 === peg$FAILED) {
                            s4 = null;
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c143(s3, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseObjectReference() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseObject();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c144(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseNot() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 33) {
                s1 = peg$c145;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c146);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseNot();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c147(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 33) {
                    s1 = peg$c145;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c146);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 45) {
                        s1 = peg$c130;
                        peg$currPos++;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c131);
                        }
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = peg$parseNot();
                    if (s2 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c148(s1, s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
                if (s0 === peg$FAILED) {
                    s0 = peg$parseReserved();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseFunctionCall();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseObjectReference();
                        }
                    }
                }
            }
            return s0;
        }
        function peg$parseObject() {
            var s0;
            s0 = peg$parseGroup();
            if (s0 === peg$FAILED) {
                s0 = peg$parseHash();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseNumber();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseStringLiteral();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseReference();
                        }
                    }
                }
            }
            return s0;
        }
        function peg$parseNumber() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 45) {
                s2 = peg$c130;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c131);
                }
            }
            if (s2 === peg$FAILED) {
                s2 = null;
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = [];
                if (peg$c149.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c150);
                    }
                }
                if (s5 !== peg$FAILED) {
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        if (peg$c149.test(input.charAt(peg$currPos))) {
                            s5 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s5 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c150);
                            }
                        }
                    }
                } else {
                    s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseDecimalNumber();
                    if (s5 === peg$FAILED) {
                        s5 = null;
                    }
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                if (s3 === peg$FAILED) {
                    s3 = peg$parseDecimalNumber();
                }
                if (s3 !== peg$FAILED) {
                    s2 = [s2, s3];
                    s1 = s2;
                } else {
                    peg$currPos = s1;
                    s1 = peg$FAILED;
                }
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c151(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parseDecimalNumber() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s1 = peg$c152;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c153);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                if (peg$c149.test(input.charAt(peg$currPos))) {
                    s3 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c150);
                    }
                }
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        if (peg$c149.test(input.charAt(peg$currPos))) {
                            s3 = input.charAt(peg$currPos);
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c150);
                            }
                        }
                    }
                } else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    s1 = [s1, s2];
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseGroup() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 40) {
                s1 = peg$c96;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c97);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseTernaryConditional();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 41) {
                        s3 = peg$c98;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c99);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c154(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseReserved() {
            var s0, s1;
            s0 = peg$currPos;
            s1 = peg$parseBoolean();
            if (s1 === peg$FAILED) {
                s1 = peg$parseUndefined();
                if (s1 === peg$FAILED) {
                    s1 = peg$parseNull();
                    if (s1 === peg$FAILED) {
                        s1 = peg$parseNaN();
                        if (s1 === peg$FAILED) {
                            s1 = peg$parseInfinity();
                        }
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c155(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parseBoolean() {
            var s0, s1;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c156) {
                s1 = peg$c156;
                peg$currPos += 4;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c157);
                }
            }
            if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 5) === peg$c158) {
                    s1 = peg$c158;
                    peg$currPos += 5;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c159);
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c160(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parseUndefined() {
            var s0, s1;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 9) === peg$c161) {
                s1 = peg$c161;
                peg$currPos += 9;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c162);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c163();
            }
            s0 = s1;
            return s0;
        }
        function peg$parseNaN() {
            var s0, s1;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c164) {
                s1 = peg$c164;
                peg$currPos += 3;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c165);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c166();
            }
            s0 = s1;
            return s0;
        }
        function peg$parseInfinity() {
            var s0, s1;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 8) === peg$c167) {
                s1 = peg$c167;
                peg$currPos += 8;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c168);
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c169();
            }
            s0 = s1;
            return s0;
        }
        function peg$parseNull() {
            var s0, s1;
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 4) === peg$c170) {
                s1 = peg$c170;
                peg$currPos += 4;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c171);
                }
            }
            if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c172) {
                    s1 = peg$c172;
                    peg$currPos += 4;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c173);
                    }
                }
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c174();
            }
            s0 = s1;
            return s0;
        }
        function peg$parseFunctionCall() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$parseObjectReference();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseParameters();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c175(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseReference() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 94) {
                s1 = peg$c176;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c177);
                }
            }
            if (s1 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c178) {
                    s1 = peg$c178;
                    peg$currPos += 2;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c179);
                    }
                }
                if (s1 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c180) {
                        s1 = peg$c180;
                        peg$currPos += 3;
                    } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c181);
                        }
                    }
                    if (s1 === peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 126) {
                            s1 = peg$c182;
                            peg$currPos++;
                        } else {
                            s1 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c183);
                            }
                        }
                        if (s1 === peg$FAILED) {
                            if (input.substr(peg$currPos, 2) === peg$c184) {
                                s1 = peg$c184;
                                peg$currPos += 2;
                            } else {
                                s1 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c185);
                                }
                            }
                        }
                    }
                }
            }
            if (s1 === peg$FAILED) {
                s1 = null;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseReferenceName();
                    if (s3 !== peg$FAILED) {
                        s4 = [];
                        s5 = peg$parseReferencePart();
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$parseReferencePart();
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parse_();
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c186(s1, s3, s4);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseReferencePart() {
            var s0;
            s0 = peg$parseReferenceKeyPath();
            if (s0 === peg$FAILED) {
                s0 = peg$parseReferenceBrackPath();
            }
            return s0;
        }
        function peg$parseReferenceKeyPath() {
            var s0, s1, s2;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s1 = peg$c152;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c153);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseReferenceName();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c187(s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseReferenceBrackPath() {
            var s0, s1, s2, s3;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 91) {
                s1 = peg$c188;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c189);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseTernaryConditional();
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 93) {
                        s3 = peg$c190;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c191);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c192(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseReferenceName() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            if (peg$c193.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c194);
                }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c193.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c194);
                        }
                    }
                }
            } else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c195(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parseHash() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 123) {
                s1 = peg$c196;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c197);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parse_();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parseHashValues();
                    if (s3 === peg$FAILED) {
                        s3 = null;
                    }
                    if (s3 !== peg$FAILED) {
                        s4 = peg$parse_();
                        if (s4 !== peg$FAILED) {
                            if (input.charCodeAt(peg$currPos) === 125) {
                                s5 = peg$c198;
                                peg$currPos++;
                            } else {
                                s5 = peg$FAILED;
                                if (peg$silentFails === 0) {
                                    peg$fail(peg$c199);
                                }
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c200(s3);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseHashValues() {
            var s0, s1;
            s0 = peg$currPos;
            s1 = peg$parseHashValuesArray();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c201(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parseHashValuesArray() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parseHashValue();
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 44) {
                    s4 = peg$c104;
                    peg$currPos++;
                } else {
                    s4 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c105);
                    }
                }
                if (s4 !== peg$FAILED) {
                    s5 = peg$parseHashValuesArray();
                    if (s5 !== peg$FAILED) {
                        s4 = [s4, s5];
                        s3 = s4;
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                }
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 44) {
                        s4 = peg$c104;
                        peg$currPos++;
                    } else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c105);
                        }
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseHashValuesArray();
                        if (s5 !== peg$FAILED) {
                            s4 = [s4, s5];
                            s3 = s4;
                        } else {
                            peg$currPos = s3;
                            s3 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s3;
                        s3 = peg$FAILED;
                    }
                }
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c202(s1, s2);
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseHashValue() {
            var s0, s1, s2, s3, s4, s5;
            s0 = peg$currPos;
            s1 = peg$parse_();
            if (s1 !== peg$FAILED) {
                s2 = peg$parseHashKey();
                if (s2 !== peg$FAILED) {
                    s3 = peg$parse_();
                    if (s3 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 58) {
                            s4 = peg$c93;
                            peg$currPos++;
                        } else {
                            s4 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c94);
                            }
                        }
                        if (s4 !== peg$FAILED) {
                            s5 = peg$parseTernaryConditional();
                            if (s5 === peg$FAILED) {
                                s5 = null;
                            }
                            if (s5 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c203(s2, s5);
                                s0 = s1;
                            } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            return s0;
        }
        function peg$parseHashKey() {
            var s0, s1;
            s0 = peg$currPos;
            s1 = peg$parseStringLiteral();
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c204(s1);
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parseReferenceName();
                if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c205(s1);
                }
                s0 = s1;
            }
            return s0;
        }
        function peg$parseStringLiteral() {
            var s0, s1, s2, s3;
            peg$silentFails++;
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 34) {
                s1 = peg$c77;
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c78);
                }
            }
            if (s1 !== peg$FAILED) {
                s2 = [];
                s3 = peg$parseDoubleStringCharacter();
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseDoubleStringCharacter();
                }
                if (s2 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 34) {
                        s3 = peg$c77;
                        peg$currPos++;
                    } else {
                        s3 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c78);
                        }
                    }
                    if (s3 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c207(s2);
                        s0 = s1;
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 39) {
                    s1 = peg$c83;
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c84);
                    }
                }
                if (s1 !== peg$FAILED) {
                    s2 = [];
                    s3 = peg$parseSingleStringCharacter();
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseSingleStringCharacter();
                    }
                    if (s2 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 39) {
                            s3 = peg$c83;
                            peg$currPos++;
                        } else {
                            s3 = peg$FAILED;
                            if (peg$silentFails === 0) {
                                peg$fail(peg$c84);
                            }
                        }
                        if (s3 !== peg$FAILED) {
                            peg$savedPos = s0;
                            s1 = peg$c207(s2);
                            s0 = s1;
                        } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            peg$silentFails--;
            if (s0 === peg$FAILED) {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c206);
                }
            }
            return s0;
        }
        function peg$parseDoubleStringCharacter() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 34) {
                s2 = peg$c77;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c78);
                }
            }
            if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 92) {
                    s2 = peg$c208;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c209);
                    }
                }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
                s1 = void 0;
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseSourceCharacter();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c210();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c211) {
                    s0 = peg$c211;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c212);
                    }
                }
            }
            return s0;
        }
        function peg$parseSingleStringCharacter() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = peg$currPos;
            peg$silentFails++;
            if (input.charCodeAt(peg$currPos) === 39) {
                s2 = peg$c83;
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c84);
                }
            }
            if (s2 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 92) {
                    s2 = peg$c208;
                    peg$currPos++;
                } else {
                    s2 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c209);
                    }
                }
            }
            peg$silentFails--;
            if (s2 === peg$FAILED) {
                s1 = void 0;
            } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                s2 = peg$parseSourceCharacter();
                if (s2 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c210();
                    s0 = s1;
                } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
            if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c213) {
                    s0 = peg$c213;
                    peg$currPos += 2;
                } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c214);
                    }
                }
            }
            return s0;
        }
        function peg$parseSourceCharacter() {
            var s0;
            if (input.length > peg$currPos) {
                s0 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c215);
                }
            }
            return s0;
        }
        function peg$parseWord() {
            var s0, s1, s2;
            s0 = peg$currPos;
            s1 = [];
            if (peg$c216.test(input.charAt(peg$currPos))) {
                s2 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c217);
                }
            }
            if (s2 !== peg$FAILED) {
                while (s2 !== peg$FAILED) {
                    s1.push(s2);
                    if (peg$c216.test(input.charAt(peg$currPos))) {
                        s2 = input.charAt(peg$currPos);
                        peg$currPos++;
                    } else {
                        s2 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c217);
                        }
                    }
                }
            } else {
                s1 = peg$FAILED;
            }
            if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c218(s1);
            }
            s0 = s1;
            return s0;
        }
        function peg$parse_() {
            var s0, s1;
            s0 = [];
            if (peg$c219.test(input.charAt(peg$currPos))) {
                s1 = input.charAt(peg$currPos);
                peg$currPos++;
            } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c220);
                }
            }
            while (s1 !== peg$FAILED) {
                s0.push(s1);
                if (peg$c219.test(input.charAt(peg$currPos))) {
                    s1 = input.charAt(peg$currPos);
                    peg$currPos++;
                } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c220);
                    }
                }
            }
            return s0;
        }
        /*jshint laxcomma:false */
        function trimWhitespace(ws) {
            return trimNewLineChars(ws).replace(/(^[\r\n]+)|([\r\n]+$)/, " ");
        }
        function trimEnds(ws) {
            return ws.replace(/(^\s+)|(\s+$)/, "").replace(/[\r\n]/g, "\\n");
        }
        function trimNewLineChars(ws) {
            return ws.replace(/[ \r\n\t]+/g, " ");
        }
        function trimmedText() {
            return trimWhitespace(text());
        }
        function attrValues(values) {
            values = values.filter(function (v) {
                return !/^[\n\t\r]+$/.test(v.value);
            });
            if (values.length === 1 && values[0].type === "string") {
                return values[0];
            } else {
                return values;
            }
        }
        function trimTextExpressions(expressions) {
            function _trim(exprs) {
                var expr;
                for (var i = exprs.length; i--;) {
                    expr = exprs[i];
                    if (expr.type == "textNode" && !/\S/.test(expr.value) && !expr.decoded) {
                        exprs.splice(i, 1);
                    } else {
                        break;
                    }
                }
                return exprs;
            }
            return _trim(_trim(expressions.reverse()).reverse());
        }
        function expression(name) {
            return Array.prototype.slice.call(arguments);
        }
        function escapeString(string) {
            return string.replace(/[\n\r]+/g, "\\n").replace(/'/g, "\\'");
        }
        peg$result = peg$startRuleFunction();
        if (peg$result !== peg$FAILED && peg$currPos === input.length) {
            return peg$result;
        } else {
            if (peg$result !== peg$FAILED && peg$currPos < input.length) {
                peg$fail({ type: "end", description: "end of input" });
            }
            throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
        }
    }
    return {
        SyntaxError: peg$SyntaxError,
        parse: peg$parse
    };
}();